// Generated by CoffeeScript 1.7.1
'use strict';
var assert, bscoords, i, t, vectors;

assert = require('assert');

bscoords = require('./lib/bscoords');

vectors = [
  {
    req: {
      mcc: '257',
      mnc: '01',
      lac: '114',
      cid: '1384',
      net: 'gsm'
    },
    res: {
      google: {
        success: true
      },
      yandex_bs: {
        success: true
      },
      yandex_cell: {
        success: true
      },
      opencellid: {
        success: true
      },
      mozlocation: {
        success: true
      }
    }
  }, {
    req: {
      mcc: '250',
      mnc: '99',
      lac: '13954',
      cid: '49373',
      net: 'gsm'
    },
    res: {
      google: {
        success: true
      },
      yandex_bs: {
        success: true
      },
      yandex_cell: {
        success: true
      },
      opencellid: {
        success: false
      },
      mozlocation: {
        success: false
      }
    }
  }, {
    req: {
      mcc: '250',
      mnc: '02',
      lac: '3901',
      cid: '12518',
      net: 'gsm'
    },
    res: {
      google: {
        success: true
      },
      yandex_bs: {
        success: false
      },
      yandex_cell: {
        success: false
      },
      opencellid: {
        success: false
      },
      mozlocation: {
        success: false
      }
    }
  }, {
    req: {
      mcc: '250',
      mnc: '01',
      lac: '3971',
      cid: '41254',
      net: 'gsm'
    },
    res: {
      google: {
        success: false
      },
      yandex_bs: {
        success: false
      },
      yandex_cell: {
        success: false
      },
      opencellid: {
        success: false
      },
      mozlocation: {
        success: false
      }
    }
  }
];

bscoords.init({
  openCellIDApiKey: 'insert your own',
  timeout: 5000
});

i = 0;

t = setInterval(function() {
  var ii;
  ii = i++;
  bscoords.request(vectors[ii].req.mcc, vectors[ii].req.mnc, vectors[ii].req.lac, vectors[ii].req.cid, vectors[ii].req.net, function(err, coords) {
    var prov, testResult, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;
    console.log("Test vector #" + ii + "\n\nRequest:\n    MCC: " + vectors[ii].req.mcc + "\n    MNC: " + vectors[ii].req.mnc + "\n    LAC: " + vectors[ii].req.lac + "\n    CID: " + vectors[ii].req.cid + "\n    Net: " + vectors[ii].req.net + "\n\nResponse:\n    Google     : (" + ((_ref = coords.google) != null ? _ref.lat : void 0) + ", " + ((_ref1 = coords.google) != null ? _ref1.lon : void 0) + "); Error: " + (err != null ? (_ref2 = err.google) != null ? _ref2.message : void 0 : void 0) + "\n    Yandex BS  : (" + ((_ref3 = coords.yandex_bs) != null ? _ref3.lat : void 0) + ", " + ((_ref4 = coords.yandex_bs) != null ? _ref4.lon : void 0) + "); Error: " + (err != null ? (_ref5 = err.yandex) != null ? _ref5.message : void 0 : void 0) + "\n    Yandex Cell: (" + ((_ref6 = coords.yandex_cell) != null ? _ref6.lat : void 0) + ", " + ((_ref7 = coords.yandex_cell) != null ? _ref7.lon : void 0) + "); Error: " + (err != null ? (_ref8 = err.yandex) != null ? _ref8.message : void 0 : void 0) + "\n    OpenCellID : (" + ((_ref9 = coords.opencellid) != null ? _ref9.lat : void 0) + ", " + ((_ref10 = coords.opencellid) != null ? _ref10.lon : void 0) + "); Error: " + (err != null ? (_ref11 = err.opencellid) != null ? _ref11.message : void 0 : void 0) + "\n    mozLocation: (" + ((_ref12 = coords.mozlocation) != null ? _ref12.lat : void 0) + ", " + ((_ref13 = coords.mozlocation) != null ? _ref13.lon : void 0) + "); Error: " + (err != null ? (_ref14 = err.mozlocation) != null ? _ref14.message : void 0 : void 0) + "\n\n--------------------------------------------------\n");
    _ref15 = vectors[ii].res;
    _results = [];
    for (prov in _ref15) {
      testResult = _ref15[prov];
      if (testResult.success) {
        _results.push(assert.equal(err != null ? err[prov] : void 0, void 0, "No error expected requesting {\n    MCC: `" + vectors[ii].req.mcc + "`\n    MNC: `" + vectors[ii].req.mnc + "`\n    LAC: `" + vectors[ii].req.lac + "`\n    CID: `" + vectors[ii].req.cid + "`\n    Net: `" + vectors[ii].req.net + "`\n} in `" + prov + "`"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
  if (i >= vectors.length) {
    return clearInterval(t);
  }
}, 3000);
